import cv2
import numpy as np

def convert_to_binary(img_gray, threshold):
    _, binary_img = cv2.threshold(img_gray, threshold, 255, cv2.THRESH_BINARY)
    return binary_img

def boundary_following(img):
    height, width = img.shape
    boundary_points = []

    # Find the starting point
    start_point = None
    for i in range(height):
        for j in range(width):
            if img[i, j] == 255:
                start_point = (i, j)
                break
        if start_point is not None:
            break

    if start_point is None:
        return boundary_points

    b0 = start_point
    C0 = (b0[0], b0[1] - 1)  # West neighboring point

    # Storing initial points for stopping condition check
    b_init = b0
    C_init = C0

    # Initialize current points
    b = b0
    C = C0

    while True:
        # Find the next boundary point
        neighborhood = get_neighborhood(b[0], b[1], img)
        for neighbor in neighborhood:
            x, y = neighbor
            if img[x, y] == 255 and (x, y) != C:
                bk = (x, y)
                Ck = (b[0], b[1])
                boundary_points.append(bk)
                b = bk
                C = Ck
                break

        # Check stopping condition
        if b == b_init and C == C_init:
            break

    return boundary_points

def get_neighborhood(i, j, img):
    height, width = img.shape
    neighborhood = []
    for x in range(i-1, i+2):
        for y in range(j-1, j+2):
            if x >= 0 and x < height and y >= 0 and y < width and (x != i or y != j):
                neighborhood.append((x, y))
    return neighborhood

# Load the image
image = cv2.imread('jgb.jpg', cv2.IMREAD_GRAYSCALE)

# Convert the image to binary
binary_image = convert_to_binary(image, 127)

# Apply boundary following algorithm
boundary_points = boundary_following(binary_image)

print("Boundary points:", boundary_points)










